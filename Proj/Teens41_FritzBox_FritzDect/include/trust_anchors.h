#ifndef _CERTIFICATES_H_
#define _CERTIFICATES_H_

// Generate trust_achors.h at https://openslab-osu.github.io/bearssl-certificate-utility/
// For fritz.box certificate see below
#ifdef __cplusplus
extern "C"
{
#endif

// RoSchmi
#include "SSLClient/bearssl_x509.h"

// RoSchmi: fritz.box certivicate
//
// How to get the certificate in the required format:
// Download the certificate in .cer format with your internet browser
// from page https://fritz.box 

// Convert certificate from .cer format to .pem format
// with openssl:
// openssl x509 -inform der -in certificate.cer -out certificate.pem
// or download the certificate in Base-64-coded .cer format and 
// rename it from certificate.cer into certificate.pem
//
// Convert certificate in PEM format to bearssl certificate with tool
// pycert_bearssl.py:
// https://github.com/OPEnSLab-OSU/SSLClient/blob/master/tools/pycert_bearssl/pycert_bearssl.py
// pycert_bearssl.py convert fritz.pem --no-search

/* This file is auto-generated by the pycert_bearssl tool.  Do not change it manually.
 * Certificates are BearSSL br_x509_trust_anchor format.  Included certs:
 *
 * Index:    0
 * Label:    hsly9xxw87vmkybw.myfritz.net
 * Subject:  CN=hsly9xxw87vmkybw.myfritz.net
 */


#define TAs_NUM 1

static const unsigned char TA_DN0[] = {
    0x30, 0x27, 0x31, 0x25, 0x30, 0x23, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13,
    0x1c, 0x68, 0x73, 0x6c, 0x79, 0x39, 0x78, 0x78, 0x77, 0x38, 0x37, 0x76,
    0x6d, 0x6b, 0x79, 0x62, 0x77, 0x2e, 0x6d, 0x79, 0x66, 0x72, 0x69, 0x74,
    0x7a, 0x2e, 0x6e, 0x65, 0x74,
};

static const unsigned char TA_RSA_N0[] = {
    0xb8, 0x26, 0xd3, 0xfa, 0xa0, 0x2f, 0xb1, 0xc1, 0x1c, 0x61, 0x97, 0x28,
    0xe8, 0x69, 0x7d, 0x48, 0x7c, 0xe2, 0x9e, 0xbd, 0xd5, 0x08, 0xbb, 0x13,
    0x0a, 0x48, 0x9b, 0x72, 0xe1, 0xad, 0xfc, 0x57, 0x6c, 0x2c, 0xb0, 0x9c,
    0x74, 0x61, 0xdf, 0x2d, 0xbd, 0x8d, 0x5f, 0xd9, 0x8c, 0x04, 0x5f, 0x81,
    0xc1, 0x84, 0x68, 0x16, 0xe5, 0xed, 0x1d, 0x5c, 0x7a, 0x3b, 0x91, 0x6b,
    0x96, 0xf2, 0x07, 0x0c, 0x40, 0xb0, 0xfa, 0xe4, 0x3e, 0xbd, 0xfc, 0xc5,
    0x31, 0xba, 0x66, 0xe9, 0xbd, 0x65, 0xbe, 0x07, 0x1e, 0xff, 0xca, 0xe5,
    0x97, 0xf3, 0x60, 0x09, 0x38, 0xab, 0xc0, 0x35, 0xba, 0xc1, 0x2f, 0x62,
    0xcb, 0xb0, 0xad, 0x02, 0x54, 0xa6, 0xfa, 0x7a, 0x99, 0x76, 0x85, 0x6a,
    0x66, 0xf7, 0x16, 0x22, 0x7a, 0xdc, 0x92, 0x7e, 0xe7, 0xee, 0x9f, 0xd9,
    0x74, 0x23, 0x36, 0x53, 0x68, 0x50, 0xd5, 0xc3, 0x59, 0x90, 0x9b, 0x71,
    0x5e, 0xf7, 0x3f, 0x68, 0xa2, 0xfd, 0x2e, 0xeb, 0x63, 0xdb, 0xc2, 0x74,
    0x27, 0xa5, 0xf1, 0x24, 0x31, 0x42, 0xbe, 0x23, 0xca, 0x10, 0xdc, 0xfa,
    0xf9, 0xf7, 0x7e, 0x07, 0x97, 0x70, 0x86, 0x66, 0xdf, 0x44, 0xf0, 0x01,
    0x80, 0xf4, 0xd2, 0xfe, 0x6a, 0x9b, 0xda, 0xf0, 0xb3, 0xc0, 0xd3, 0x6d,
    0xbe, 0x19, 0xe4, 0xbc, 0xf4, 0x6c, 0x92, 0xa7, 0x3a, 0x41, 0x27, 0x24,
    0x76, 0x6d, 0xff, 0x1c, 0x8a, 0x29, 0x88, 0xa4, 0x0f, 0xfc, 0x0a, 0x35,
    0x96, 0x70, 0x78, 0x57, 0xfb, 0x43, 0x39, 0xfe, 0xd5, 0x85, 0x3b, 0xd5,
    0xa2, 0x4e, 0xa9, 0x03, 0x50, 0xf6, 0x71, 0xc2, 0x40, 0xfc, 0x73, 0x40,
    0x60, 0x2b, 0xf0, 0xf7, 0xf7, 0xc5, 0xa0, 0xab, 0x40, 0xc5, 0xb9, 0xd5,
    0x15, 0x72, 0x34, 0xf8, 0x19, 0x6c, 0x52, 0x27, 0xd8, 0x76, 0x70, 0x9c,
    0x52, 0x4a, 0xad, 0x0f,
};

static const unsigned char TA_RSA_E0[] = {
    0x01, 0x00, 0x01,
};

static const br_x509_trust_anchor TAs[] = {
    {
        { (unsigned char *)TA_DN0, sizeof TA_DN0 },
        BR_X509_TA_CA,
        {
            BR_KEYTYPE_RSA,
            { .rsa = {
                (unsigned char *)TA_RSA_N0, sizeof TA_RSA_N0,
                (unsigned char *)TA_RSA_E0, sizeof TA_RSA_E0,
            } }
        }
    },
};

#ifdef __cplusplus
} /* extern "C" */
#endif
#endif /* ifndef _CERTIFICATES_H_ */


